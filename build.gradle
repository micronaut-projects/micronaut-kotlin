buildscript {
    repositories {
        mavenCentral()
        gradlePluginPortal()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:${dokka_version}"
        classpath "io.micronaut.build.internal:micronaut-gradle-plugins:5.1.2"
    }
}

subprojects { Project subproject ->
    group "io.micronaut.kotlin"

    apply plugin: "io.micronaut.build.internal.common"
    apply plugin: "kotlin"
    apply plugin: "io.micronaut.build.internal.dependency-updates"

    if (subproject.parent.name == "examples" || subproject.name == "examples") {
        return
    }

    apply plugin: "io.micronaut.build.internal.publishing"
}

apply plugin: "io.micronaut.build.internal.docs"
apply plugin: "io.micronaut.build.internal.dependency-updates"
apply plugin: 'org.jetbrains.dokka'

tasks.named("dokkaHtmlMultiModule") {
    outputDirectory.set(new File("${rootProject.buildDir}/docs/api"))
}

task renameDokkaRootFile(type: Copy) {
    from "${rootProject.buildDir}/docs/api/-modules.html"
    into "${rootProject.buildDir}/docs/api/"
    rename { String fileName ->
        fileName.replace("-modules", "index")
    }
}
renameDokkaRootFile.dependsOn(dokkaHtmlMultiModule)

docs.dependsOn(renameDokkaRootFile)

def prepareGuideHotfix = tasks.register("prepareGuideHotfix") {
    doLast {
        file("${buildDir}/doc-resources").mkdirs()
    }
}

tasks.named('publishGuide') {
    dependsOn(prepareGuideHotfix)
    dependsOn(tasks.javadoc)
}
